# -*- coding: utf-8 -*-

# Make import work like include(./../pkg)
import os, sys
try:
    file = __file__
except:
    file = sys.argv[0]
suffix = '\\..'
path=os.path.dirname(os.path.abspath(__file__)) + suffix
sys.path.insert(0, path)

import MVPBase

# TODO: when binds are registered, have some way to allow the presetner
# to disable them
from tkCustom._Debug import D

class Interactor(MVPBase.BaseInteractor):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    # called by mvpbase_presenter.start()
    def start(self, *args, **kwargs):
        super().start(*args, **kwargs)
        # now view and presenter are coupled
        self.binds_register()

    def callback_register_all(self):
        """ set callbacks for events generated by view """
        presenter = self.presenter

        # Canvas zoom clicks
        def bindcanvas(seq, func):
            self.view.bind.register(self.view.canvas, seq, func)

        bindcanvas('<MouseWheel>', presenter.on_mouse_wheel)

        # Left to zoom in, middle to reset and right to zoom out
        mult = 1.5
        bindcanvas('<Button 1>', lambda e: presenter.on_scale(mult, e))
        bindcanvas('<Button 2>', lambda e: presenter.on_scale(1.0, e))
        bindcanvas('<Button 3>', lambda e: presenter.on_scale(1/mult, e))
        bindcanvas('<Button 4>', lambda e: D.ebug('button 4 canvas'))
        bindcanvas('<Enter>', lambda e: D.ebug('enter canvas'))
        bindcanvas('<Leave>', lambda e: D.ebug('leave canvas'))
        self.view.canvas.focus_set()
        self.view.bind.activate_all(active=True)
        

        self.bind_as('shortcuts', self.view.canvas, '<Key>', self.presenter.on_keyevent, True)
        self.bind_activate('shortcuts', True)
#        bind1 = self.view.bind.register(
#                self.view.canvas, '<Key>',
#                self.presenter.on_keyevent,
#                True
#                )
